package messiah;

import messiah.search.generic.SearchResult;
import messiah.search.SearchAlgoEnum;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import messiah.database.Database;
import messiah.storage.generic.DbAccess;
import javax.swing.JTree;
import messiah.parse.StaticIntervalGenerator;
import usu.algebra.KeywordSearchExpression;

/**
 * The UI frame
 *
 * @author truongbaquan and Curtis Dyreson
 */
public class TempUserInterfacePriorToLotsOfChanges extends javax.swing.JFrame {

    private Main controller = new Main();

    /**
     * Creates new form UserInterface
     */
    public TempUserInterfacePriorToLotsOfChanges() {
        initComponents();
        this.algoComboBox.setModel(new DefaultComboBoxModel(SearchAlgoEnum.values()));
        this.getRootPane().setDefaultButton(searchButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        indexButtonGroup = new javax.swing.ButtonGroup();
        algoButtonGroup = new javax.swing.ButtonGroup();
        datasetPanel = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        xmlFile_jTextField = new javax.swing.JTextField();
        loadDB_Button = new javax.swing.JButton();
        inputPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchBox = new javax.swing.JTextField();
        structureScrollPane = new javax.swing.JScrollPane();
        structureArea = new javax.swing.JTextArea();
        resultPane = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        searchTime = new javax.swing.JLabel();
        algoPanel = new javax.swing.JPanel();
        autoRadioButton = new javax.swing.JRadioButton();
        manualRadioButton = new javax.swing.JRadioButton();
        algoSelectCards = new javax.swing.JPanel();
        algoComboBox = new javax.swing.JComboBox();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        help_JMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MESSIAH");
        setName("mainFrame"); // NOI18N

        datasetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Load XML"));

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        xmlFile_jTextField.setEditable(false);
        xmlFile_jTextField.setText("Please select/load an XMLfile");

        loadDB_Button.setText("Load DB");
        loadDB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDB_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datasetPanelLayout = new javax.swing.GroupLayout(datasetPanel);
        datasetPanel.setLayout(datasetPanelLayout);
        datasetPanelLayout.setHorizontalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datasetPanelLayout.createSequentialGroup()
                .addComponent(xmlFile_jTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadDB_Button)
                .addContainerGap())
        );
        datasetPanelLayout.setVerticalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datasetPanelLayout.createSequentialGroup()
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmlFile_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton)
                    .addComponent(loadDB_Button))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Panel"));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchBox, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.CENTER))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(searchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        structureScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("XML Structural Summary"));

        structureArea.setBackground(new java.awt.Color(240, 240, 240));
        structureArea.setColumns(20);
        structureArea.setRows(5);
        structureArea.setEnabled(false);
        structureScrollPane.setViewportView(structureArea);

        resultPane.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        resultArea.setEditable(false);
        resultArea.setBackground(new java.awt.Color(240, 240, 240));
        resultArea.setColumns(20);
        resultArea.setRows(5);
        resultPane.setViewportView(resultArea);
        resultArea.getAccessibleContext().setAccessibleParent(resultArea);

        algoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Algorithms"));

        algoButtonGroup.add(autoRadioButton);
        autoRadioButton.setSelected(true);
        autoRadioButton.setText("Auto");

        algoButtonGroup.add(manualRadioButton);
        manualRadioButton.setText("Manual");

        algoSelectCards.setLayout(new java.awt.CardLayout());

        algoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FullSLCA", "IndexedLookup" }));
        algoSelectCards.add(algoComboBox, "card2");

        javax.swing.GroupLayout algoPanelLayout = new javax.swing.GroupLayout(algoPanel);
        algoPanel.setLayout(algoPanelLayout);
        algoPanelLayout.setHorizontalGroup(
            algoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algoPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(algoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(algoSelectCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(algoPanelLayout.createSequentialGroup()
                        .addComponent(autoRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(manualRadioButton)))
                .addGap(14, 14, 14))
        );
        algoPanelLayout.setVerticalGroup(
            algoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, algoPanelLayout.createSequentialGroup()
                .addGroup(algoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoRadioButton)
                    .addComponent(manualRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algoSelectCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("File");

        jMenuItem1.setText("Open File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        fileMenu.add(Exit);

        mainMenuBar.add(fileMenu);

        help_JMenu.setText("Help");
        mainMenuBar.add(help_JMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchTime, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addComponent(structureScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datasetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(structureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(algoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(datasetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(resultPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt triggered on clicking the search button
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        DecimalFormat searchtime = new DecimalFormat("#0.000 msec");
        try {
            if (!this.controller.isInitialized()) {
                String msg = "Database not selected.\nPlease load a Database before searching.";
                JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String searchText = searchBox.getText();
            SearchAlgoEnum searchAlgo;
            if (!isAlgoManualSelected()) {
                searchAlgo = this.controller.selectAlgo(searchText);
                this.algoComboBox.setSelectedItem(searchAlgo);
            } else {
                searchAlgo = (SearchAlgoEnum) this.algoComboBox.getSelectedItem();
            }
            KeywordSearchExpression exp = this.controller.compileFromString(searchText);
            SearchResult result = this.controller.search(this.isIndexedUsed(),exp);

            //generate results and make a JTree
            JTree resultTree = result.getResultTree();
            //resultTree.setCellRenderer(new PathTreeCellRenderer());
            if (resultTree != null) {
                //add the JTree to the result box
                resultPane.getViewport().add(resultTree);
                searchTime.setForeground(Color.BLACK);
                searchTime.setText("(" + searchtime.format(result.getSearchTime()) + ")");
            } else {
                resultPane.getViewport().setView(null);
                searchTime.setForeground(Color.red);
                searchTime.setText("No match found.");
            }
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
}//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Opening the XML file from the file menu
     *
     * @param evt
     */
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        openDialogForParseFile();
    }//GEN-LAST:event_browseButtonActionPerformed
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        openDialogForParseFile();
}//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void loadDB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDB_ButtonActionPerformed
        // Create the dialog to select a FOLDER representing the loaded databases
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(Config.DB_FOLDER_STRING)); // root folders of loaded databases
        chooser.setDialogTitle("Select DB");
        chooser.setApproveButtonText("Select"); // Change "OK" button to "Select"
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Select only directories
        chooser.setAcceptAllFileFilterUsed(false); // disable the "All files" option.

        // Does the user select a folder (database)?
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Yes. Try to load it.
            DbAccess newDataset = controller.loadDataset(chooser.getSelectedFile().getName());
            if (newDataset != null) {
                //JTree tree = newDataset.getXmlTree();
                JTree tree = new JTree();
                tree.setCellRenderer(new PathTreeCellRenderer());
                structureScrollPane.getViewport().add(tree);
                xmlFile_jTextField.setText(chooser.getSelectedFile().getName());
            } else {
                System.err.println("Fail to load DB");
            }
        }
    }//GEN-LAST:event_loadDB_ButtonActionPerformed

    /**
     * Reads and displays the XML file
     *
     * @param fullPathFilename
     * @return
     * @throws java.io.IOException
     */
    private void openDialogForParseFile() {
        // Open a dialog for users to provide the file
        JFileChooser fc = new JFileChooser();
        FileFilter fileFilter = new FileNameExtensionFilter("XML file", "xml");
        fc.setFileFilter(fileFilter);
        fc.setAcceptAllFileFilterUsed(false); // disable the All Files option
        int returnVal = fc.showOpenDialog(null);
        // Did the users provide some file?
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Yes. Get it.
            File file = fc.getSelectedFile();
            String fname = fc.getSelectedFile().getName();
            int index = fc.getSelectedFile().getName().lastIndexOf('.');
            String datasetName = fname.substring(0, index);

            if (fileFilter.accept(file)) {
                xmlFile_jTextField.setText(file.getAbsolutePath());

                // Does the directory exist?
                if (!controller.isDatasetCreated(datasetName)) {
                    // No. Start parsing
                    startParsing(datasetName, file);
                } else {
                    // Yes. It means the XML file has been stored in the database. Show a warning message.
                    String msg = "\"" + fname.concat("\" exist in Database. \nPlease load from Database.");
                    JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                String msg = "Invalid file:\"" + fname + "\" \nPlease select a valid XML file";
                JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void startParsing(String datasetName, File file) {
        // Start parsing
        /* Uncomment this to restore
        ParseDialog dialog = new ParseDialog(this, true);
        System.out.println("Start parsing " + datasetName);
        controller.parseDataset(datasetName, file, dialog, new StaticIntervalGenerator(),0);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        */
    }

    protected void finishParsing() {
        System.out.println("Finish parsing ");
        //Display Tree
        controller.resetIndexes();
        //System.out.println("Indexes reset ");
        Database db = controller.getCurIndex().getDb();
        //System.out.println("DB got ");
        //JTree tree = db.getXmlTree();
        JTree tree = new JTree();
        //System.out.println("Tree set ");
        tree.setCellRenderer(new PathTreeCellRenderer());
        structureScrollPane.getViewport().add(tree);
    }

    private boolean isIndexedUsed() {
        return true;
    }

    private boolean isAlgoManualSelected() {
        return this.manualRadioButton.isSelected();
    }

    private DefaultTreeModel buildPathTreeModel(Collection<Path> paths) {
        // sort all path expressions
        SortedSet<String> sortedPathExprList = new TreeSet<String>();
        for (Path path : paths) {
            sortedPathExprList.add(path.getInfo().getPathExpr());
        }

        HashMap<String, DefaultMutableTreeNode> pathExprMap
                = new HashMap<String, DefaultMutableTreeNode>(); // pathExpr -> node
        ArrayList<DefaultMutableTreeNode> roots
                = new ArrayList<DefaultMutableTreeNode>();
        for (String pathExpr : sortedPathExprList) {
            int lastSplit = pathExpr.lastIndexOf('.');
            String parentPathExpr = pathExpr.substring(0, lastSplit);
            String label = pathExpr.substring(lastSplit + 1, pathExpr.length() - 1); // omit . and #
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(label);
            DefaultMutableTreeNode parentNode = pathExprMap.get(parentPathExpr);
            if (parentNode != null) {
                parentNode.add(node);
                pathExprMap.put(pathExpr, node);
            } else {
                roots.add(node);
            }
        }

        DefaultTreeModel tree = null;
        if (roots.size() == 1) {
            tree = new DefaultTreeModel(roots.get(0));
        } else {
            DefaultMutableTreeNode tempRoot = new DefaultMutableTreeNode("root");
            for (DefaultMutableTreeNode root : roots) {
                tempRoot.add(root);
            }
            tree = new DefaultTreeModel(tempRoot);
        }
        return tree;
    }

    // <editor-fold defaultstate="collapsed" desc="class PathTreeCellRenderer">
    private class PathTreeCellRenderer extends DefaultTreeCellRenderer {

        private Font font, boldFont;

        public PathTreeCellRenderer() {
            // set up the look-&-feel of the rendered
            font = UIManager.getFont("Tree.font");
            if (font != null) {
                this.setFont(font);
                boldFont = font.deriveFont(Font.BOLD);
            }
        }

        /**
         * Sets the value of the current tree cell to value. If selected is
         * true, the cell will be drawn as if selected. If expanded is true the
         * node is currently expanded and if leaf is true the node represents a
         * leaf and if hasFocus is true the node currently has focus. tree is
         * the JTree the receiver is being configured for. Returns the Component
         * that the renderer uses to draw the value.
         *
         * @param tree
         * @param value
         * @param selected
         * @param expanded
         * @param leaf
         * @param row
         * @param hasFocus
         * @return
         */
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean selected, boolean expanded, boolean leaf, int row,
                boolean hasFocus) {

//            String stringValue = tree.convertValueToText(value, selected,
//                    expanded, leaf, row, false);
//            this.setText(stringValue);
//            this.setEnabled(tree.isEnabled());


return this;
/*
            if ((value != null) && (value instanceof DefaultMutableTreeNode)) {
                Object userObject = ((DefaultMutableTreeNode) value).getUserObject();
                if (userObject instanceof PathInfo) {
                    PathInfo pathInfo = (PathInfo) userObject;
                    if (pathInfo.isRepeatable()) {
                        this.setFont(boldFont);
                    } else {
                        this.setFont(font);
                    }
                    String pathExpr = pathInfo.getPathExpr();
                    int lastPeriod = pathExpr.lastIndexOf('.');
                    String text = pathExpr.substring(lastPeriod, pathExpr.length() - 1);
                    this.setText(text + " hello");
                    this.setEnabled(tree.isEnabled());
                }
            }
            return this;
*/
        }
    }

//    /**
//    Add this override to recalculate the width of this JLabel.
//    The super class default behaviour miscalculates the width, and so the
//    '...'  can appear. Instead, we 'simulate' the FontMetrics'
//    stringWidth() method, by using charWidth(), plus some initialization
//    and padding
//     */
//    @Override
//    public Dimension getPreferredSize() {
//        Dimension dim = super.getPreferredSize();
//        FontMetrics fm = getFontMetrics(getFont());
//        char[] chars = getText().toCharArray();
//
//        int w = getIconTextGap() + 16;
//        for (char ch : chars) {
//            w += fm.charWidth(ch);
//        }
//        w += getText().length();
//        dim.width = w;
//        return dim;
//    }
    // </editor-fold>
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.ButtonGroup algoButtonGroup;
    private javax.swing.JComboBox algoComboBox;
    private javax.swing.JPanel algoPanel;
    private javax.swing.JPanel algoSelectCards;
    private javax.swing.JRadioButton autoRadioButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel datasetPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu help_JMenu;
    private javax.swing.ButtonGroup indexButtonGroup;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton loadDB_Button;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JRadioButton manualRadioButton;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JScrollPane resultPane;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchTime;
    private javax.swing.JTextArea structureArea;
    private javax.swing.JScrollPane structureScrollPane;
    private javax.swing.JTextField xmlFile_jTextField;
    // End of variables declaration//GEN-END:variables
}
